package relativitization.universe.data

import kotlinx.serialization.Serializable
import relativitization.universe.data.components.*
import relativitization.universe.data.components.MutablePlayerScienceData
import relativitization.universe.data.components.MutablePoliticsData
import relativitization.universe.data.components.MutablePopSystemData
import relativitization.universe.data.components.PlayerScienceData
import relativitization.universe.data.components.PoliticsData
import relativitization.universe.data.components.PopSystemData
import relativitization.universe.data.components.defaults.physics.*
import relativitization.universe.data.events.EventData
import relativitization.universe.data.events.MutableEventData
import relativitization.universe.maths.collection.ListFind
import relativitization.universe.maths.grid.Grids.double4DToGroupId
import relativitization.universe.maths.grid.Grids.groupIdToCenterDouble3D
import relativitization.universe.utils.RelativitizationLogManager
import kotlin.reflect.full.createInstance

/**
 * Data of the basic unit (player)
 *
 * @property playerId playerId
 * @property playerType ai / human / none (e.g. resource)
 * @property int4D 4D coordinate of the player
 * @property int4DHistory historical coordinate of the player
 * @property double4D the accurate 4D coordinate of the player in floating point
 * @property groupId the id of the group where the player can instantly communicate with
 * @property velocity the velocity of the player
 * @property playerInternalData the internal data of this player
 * @property newPlayerList new players internal data generated by this player, temporarily stored
 */
@Serializable
data class PlayerData(
    val playerId: Int,
    val name: String = "Default Player",
    val playerType: PlayerType = PlayerType.AI,
    val int4D: Int4D = Int4D(0, 0, 0, 0),
    val int4DHistory: List<Int4D> = listOf(),
    val double4D: Double4D = int4D.toDouble4D(),
    val groupId: Int = double4DToGroupId(double4D, 0.01),
    val velocity: Velocity = Velocity(0.0, 0.0, 0.0),
    val playerInternalData: PlayerInternalData = PlayerInternalData(
        directLeaderId = playerId, leaderIdList = listOf(playerId)
    ),
    val newPlayerList: List<PlayerInternalData> = listOf()
) {
    /**
     * @param otherPlayerId whether this id is the player or one the subordinates of the player
     */
    fun isSubOrdinateOrSelf(otherPlayerId: Int): Boolean {
        return (otherPlayerId == playerId) || playerInternalData.subordinateIdList.contains(
            otherPlayerId
        )
    }

    /**
     * @param otherPlayerId whether this id is the player or one of the leaders of the player
     */
    fun isLeaderOrSelf(otherPlayerId: Int): Boolean {
        return (otherPlayerId == playerId) || playerInternalData.leaderIdList.contains(otherPlayerId)
    }

    /**
     * The top leader id
     */
    fun topLeaderId(): Int {
        return playerInternalData.leaderIdList.firstOrNull() ?: playerId
    }

    fun isValid(currentTime: Int): Boolean {
        val isTValid: Boolean = currentTime == int4D.t
        val isRestMassValid: Boolean = (playerInternalData.physicsData().coreRestMass > 0.0) &&
                (playerInternalData.physicsData().fuelRestMassData.total() >= 0.0)

        return isTValid && isRestMassValid
    }

    /**
     * The center position of the group
     */
    fun groupCenterDouble3D(edgeLength: Double): Double3D {
        return int4D.toInt3D() + groupIdToCenterDouble3D(
            double4DToGroupId(double4D, edgeLength),
            edgeLength
        )
    }
}

@Serializable
data class MutablePlayerData(
    val playerId: Int,
    var name: String = "Default Player",
    var playerType: PlayerType = PlayerType.AI,
    var int4D: MutableInt4D = MutableInt4D(0, 0, 0, 0),
    val int4DHistory: MutableList<Int4D> = mutableListOf(),
    var double4D: MutableDouble4D = int4D.toMutableDouble4D(),
    var groupId: Int = double4DToGroupId(double4D, 0.01),
    var velocity: MutableVelocity = MutableVelocity(0.0, 0.0, 0.0),
    var playerInternalData: MutablePlayerInternalData = MutablePlayerInternalData(
        directLeaderId = playerId, leaderIdList = mutableListOf(playerId)
    ),
    val newPlayerList: MutableList<MutablePlayerInternalData> = mutableListOf()
) {
    /**
     * Synchronize different data component to ensure consistency
     */
    fun syncData() {
        playerInternalData.syncDataComponent()
    }

    /**
     * @param otherPlayerId whether this id is the player or one the subordinates of the player
     */
    fun isSubOrdinateOrSelf(otherPlayerId: Int): Boolean {
        return (otherPlayerId == playerId) || playerInternalData.subordinateIdList.contains(
            otherPlayerId
        )
    }

    /**
     * @param otherPlayerId whether this id is the player or one of the leaders of the player
     */
    fun isLeaderOrSelf(otherPlayerId: Int): Boolean {
        return (otherPlayerId == playerId) || playerInternalData.leaderIdList.contains(otherPlayerId)
    }

    /**
     * The top leader id
     */
    fun topLeaderId(): Int {
        return playerInternalData.leaderIdList.firstOrNull() ?: playerId
    }

    /**
     * Is player the top leader
     */
    fun isTopLeader(): Boolean {
        return topLeaderId() == playerId
    }


    /**
     * Change direct leader id and add all leaders of direct leader
     */
    fun changeDirectLeaderId(leaderListOfDirectLeader: List<Int>) {
        if (playerInternalData.subordinateIdList.all { !leaderListOfDirectLeader.contains(it) }) {
            if (leaderListOfDirectLeader.isNotEmpty()) {
                playerInternalData.directLeaderId = leaderListOfDirectLeader.last()
                playerInternalData.leaderIdList.clear()
                playerInternalData.leaderIdList.addAll(leaderListOfDirectLeader)
                playerInternalData.leaderIdList.add(playerId)
            } else {
                playerInternalData.directLeaderId = playerId
                playerInternalData.leaderIdList.clear()
                playerInternalData.leaderIdList.add(playerId)
            }
        } else {
            logger.error("Add subordinate as leader")
        }
    }

    /**
     * Add direct subordinate to this player
     */
    fun addDirectSubordinateId(subordinateId: Int) {
        if (!playerInternalData.leaderIdList.contains(subordinateId)) {
            if (!playerInternalData.directSubordinateIdList.contains(subordinateId)) {
                playerInternalData.directSubordinateIdList.add(subordinateId)
            }

            if (!playerInternalData.subordinateIdList.contains(subordinateId)) {
                playerInternalData.subordinateIdList.add(subordinateId)
            }
        } else {
            logger.error("Add leader as subordinate")
        }
    }

    /**
     * Add subordinate to this player
     */
    fun addSubordinateId(subordinateId: Int) {
        if (!playerInternalData.leaderIdList.contains(subordinateId)) {
            if (!playerInternalData.subordinateIdList.contains(subordinateId)) {
                playerInternalData.subordinateIdList.add(subordinateId)
            }
        } else {
            logger.error("Add leader as subordinate")
        }
    }

    companion object {
        private val logger = RelativitizationLogManager.getLogger()
    }
}

/**
 * Type of player: AI, human, none (e.g. resource)
 */
enum class PlayerType {
    AI,
    HUMAN,
    NONE,
}

/**
 * Player internal data
 *
 * @property directLeaderId player id of the direct leader, equals -1 if no leader
 * @property directSubordinateIdList direct subordinates
 * @property leaderIdList list of player ids of leader, leader of leader, etc., from -1 to direct leader
 * @property subordinateIdList list of player ids of the subordinates of this player
 * @property isAlive whether the player is alive or dead
 * @property aiData data for ai computation, e.g. name, cool down
 * @property eventDataMap list of current event on this player
 * @property physicsData physics-related data
 * @property popSystemData population system related data
 * @property playerScienceData research related data
 * @property politicsData political related data
 * @property diplomacyData diplomatic relation data
 * @property economyData economy related data
 * @property modifierData player modifier, e.g. disable certain action for a time limit
 */
@Serializable
data class PlayerInternalData(
    val directLeaderId: Int,
    val leaderIdList: List<Int>,
    val directSubordinateIdList: List<Int> = listOf(),
    val subordinateIdList: List<Int> = listOf(),
    val isAlive: Boolean = true,
    val eventDataMap: Map<Int, EventData> = mapOf(),
    val playerDataComponentMap: PlayerDataComponentMap = PlayerDataComponentMap(
        DefaultPlayerDataComponent::class.sealedSubclasses.map { it.createInstance() }
    ),
) {
    fun aiData(): AIData = playerDataComponentMap.getOrDefault(AIData::class, AIData())

    fun diplomacyData(): DiplomacyData =
        playerDataComponentMap.getOrDefault(DiplomacyData::class, DiplomacyData())

    fun economyData(): EconomyData =
        playerDataComponentMap.getOrDefault(EconomyData::class, EconomyData())

    fun modifierData(): ModifierData =
        playerDataComponentMap.getOrDefault(ModifierData::class, ModifierData())

    fun physicsData(): PhysicsData =
        playerDataComponentMap.getOrDefault(PhysicsData::class, PhysicsData())

    fun playerScienceData(): PlayerScienceData =
        playerDataComponentMap.getOrDefault(PlayerScienceData::class, PlayerScienceData())

    fun politicsData(): PoliticsData =
        playerDataComponentMap.getOrDefault(PoliticsData::class, PoliticsData())

    fun popSystemData(): PopSystemData =
        playerDataComponentMap.getOrDefault(PopSystemData::class, PopSystemData())

    companion object {
        private val logger = RelativitizationLogManager.getLogger()
    }
}

@Serializable
data class MutablePlayerInternalData(
    var directLeaderId: Int,
    var leaderIdList: MutableList<Int>,
    var directSubordinateIdList: MutableList<Int> = mutableListOf(),
    var subordinateIdList: MutableList<Int> = mutableListOf(),
    var isAlive: Boolean = true,
    var eventDataMap: MutableMap<Int, MutableEventData> = mutableMapOf(),
    var playerDataComponentMap: MutablePlayerDataComponentMap = MutablePlayerDataComponentMap(
        MutableDefaultPlayerDataComponent::class.sealedSubclasses.map { it.createInstance() }
    ),
) {
    fun aiData(): MutableAIData =
        playerDataComponentMap.getOrDefault(MutableAIData::class, MutableAIData())

    fun aiData(newAIData: MutableAIData) = playerDataComponentMap.put(newAIData)

    fun diplomacyData(): MutableDiplomacyData =
        playerDataComponentMap.getOrDefault(MutableDiplomacyData::class, MutableDiplomacyData())

    fun diplomacyData(newDiplomacyData: MutableDiplomacyData) =
        playerDataComponentMap.put(newDiplomacyData)

    fun economyData(): MutableEconomyData =
        playerDataComponentMap.getOrDefault(MutableEconomyData::class, MutableEconomyData())

    fun economyData(newEconomyData: MutableEconomyData) = playerDataComponentMap.put(newEconomyData)

    fun modifierData(): MutableModifierData =
        playerDataComponentMap.getOrDefault(MutableModifierData::class, MutableModifierData())

    fun modifierData(newModifierData: MutableModifierData) =
        playerDataComponentMap.put(newModifierData)

    fun physicsData(): MutablePhysicsData =
        playerDataComponentMap.getOrDefault(MutablePhysicsData::class, MutablePhysicsData())

    fun physicsData(newPhysicsData: MutablePhysicsData) = playerDataComponentMap.put(newPhysicsData)

    fun playerScienceData(): MutablePlayerScienceData =
        playerDataComponentMap.getOrDefault(
            MutablePlayerScienceData::class,
            MutablePlayerScienceData()
        )

    fun playerScienceData(newPlayerScienceData: MutablePlayerScienceData) =
        playerDataComponentMap.put(newPlayerScienceData)

    fun politicsData(): MutablePoliticsData =
        playerDataComponentMap.getOrDefault(MutablePoliticsData::class, MutablePoliticsData())

    fun politicsData(newPoliticsData: MutablePoliticsData) =
        playerDataComponentMap.put(newPoliticsData)

    fun popSystemData(): MutablePopSystemData =
        playerDataComponentMap.getOrDefault(MutablePopSystemData::class, MutablePopSystemData())

    fun popSystemData(newPopSystemData: MutablePopSystemData) =
        playerDataComponentMap.put(newPopSystemData)


    /**
     * Add an event to event map
     */
    fun addEventData(eventData: MutableEventData) {
        val newKey: Int = ListFind.minMissing(eventDataMap.keys.toList(), 0)
        eventDataMap[newKey] = eventData
    }

    /**
     * Synchronize different data component to ensure consistency
     */
    fun syncDataComponent() {
        if (physicsData().coreRestMass !=
            popSystemData().totalCoreRestMass()
        ) {
            logger.debug("Sync data component, change core mass")
            physicsData().coreRestMass =
                popSystemData().totalCoreRestMass()
        }

        if (physicsData().otherRestMass !=
            popSystemData().totalOtherRestMass()
        ) {
            logger.debug("Sync data component, change other rest mass")
            physicsData().otherRestMass =
                popSystemData().totalOtherRestMass()
        }

        if (physicsData().fuelRestMassData.maxMovementDelta !=
            popSystemData().totalMaxMovementDeltaFuelRestMass()
        ) {
            logger.debug("Sync data component, change max delta fuel rest mass")
            physicsData().fuelRestMassData.maxMovementDelta =
                popSystemData().totalMaxMovementDeltaFuelRestMass()
        }
    }

    companion object {
        private val logger = RelativitizationLogManager.getLogger()
    }
}